C# - Nullable Types

As you know, a value type cannot be assigned a null value. For example, int i = null will give you a compile time error.

C# 2.0 introduced nullable types that allow you to assign null to value type variables. 

You can declare nullable types using Nullable<t> where T is a type.

Example: Nullable type

Nullable<int> i = null;

A nullable type can represent the correct range of values for its underlying value type, plus an additional null value. 

For example, Nullable<int> can be assigned any value from -2147483648 to 2147483647, or a null value.

The Nullable types are instances of System.Nullable<T> struct. 

C# provides a special data types, the nullable types, to which you can assign normal range of values as well as null values.

For example, you can store any value from -2,147,483,648 to 2,147,483,647 or null in a Nullable<Int32> variable. 

Similarly, you can assign true, false, or null in a Nullable<bool> variable. Syntax for declaring a nullable type is as follows âˆ’

< data_type> ? <variable_name> = null;

using System;

namespace CalculatorApplication {
   class NullablesAtShow {
      static void Main(string[] args) {
//Shorthand Syntax for Nullable Types
         int? num1 = null;
         int? num2 = 45;
         
         double? num3 = new double?();
         double? num4 = 3.14157;
         
         bool? boolval = new bool?();

         // display the values
         Console.WriteLine("Nullables at Show: {0}, {1}, {2}, {3}", num1, num2, num3, num4);
         Console.WriteLine("A Nullable boolean value: {0}", boolval);
         Console.ReadLine();
      }
   }
}
---------------------------------------------------------------------
The Null Coalescing Operator (??)
The null coalescing operator is used with the nullable value types and reference types. It is used for converting an operand to the type of another nullable (or not) value type operand, where an implicit conversion is possible.

If the value of the first operand is null, then the operator returns the value of the second operand, otherwise it returns the value of the first operand. 

using System;

namespace CalculatorApplication {
   class NullablesAtShow {
      static void Main(string[] args) {
         double? num1 = null;
         double? num2 = 3.14157;
         double num3;
         
         num3 = num1 ?? 5.34;      
         Console.WriteLine(" Value of num3: {0}", num3);
         
         num3 = num2 ?? 5.34;
         Console.WriteLine(" Value of num3: {0}", num3);
         Console.ReadLine();
      }
   }
}
--------------------------------------------------
using System;
					
public class Program
{
	public static void Main()
	{
		Nullable<int> i = null;

		if (i.HasValue)
			Console.WriteLine(i.Value); // or Console.WriteLine(i)
		else
			Console.WriteLine("Null");
	}
}

The HasValue returns true if the object has been assigned a value; if it has not been assigned any value or has been assigned a null value, it will return false.

Accessing the value using NullableType.value will throw a runtime exception if nullable type is null or not assigned any value. For example, i.Value will throw an exception if i is null:

Use the GetValueOrDefault() method to get an actual value if it is not null and the default value if it is null. For example:

static void Main(string[] args)
{
    Nullable<int> i = null;

    Console.WriteLine(i.GetValueOrDefault()); //instead of Console.WriteLine(i.Value());throw a runtime exception
}
-------------------------------------------------------
Nullable Helper Class
Null is considered to be less than any value. So comparison operators won't work against null. 
Consider the following example where i is neither less than j, greater than j nor equal to j:
using System;
					
public class Program
{
	public static void Main()
	{
		int? i = null;
		int j = 10;
	
	
		if (i < j)
			Console.WriteLine("i < j");
		else if( i > 10)
			Console.WriteLine("i > j");
		else if( i == 10)
			Console.WriteLine("i == j");
		else
			Console.WriteLine("Could not compare");
	}
}
-----------------------------------------------------------
Assignment Rules
A nullable type has the same assignment rules as a value type. It must be assigned a value before using it if nullable types are declared in a function as local variables. If it is a field of any class then it will have a null value by default.

For example, the following nullable of int type is declared and used without assigning any value. The compiler will give "Use of unassigned local variable 'i'" error:

using System;
					
public class Program
{
	public static void Main()
	{
		MyClass mycls = new MyClass();

        if(mycls.i == null)
        	Console.WriteLine("Null");
	}
}

class MyClass
{
    public Nullable<int> i;
}
--------------------------------------
using System;
					
public class Program
{
	public static void Main()
	{
		public Nullable<int> i;
		Console.WriteLine(i); //error->unassigned
	}
}
-----------------------------------------------
Characteristics of Nullable Types:

Nullable types can only be used with value types.
The Value property will throw an InvalidOperationException if value is null; otherwise it will return the value.
The HasValue property returns true if the variable contains a value, or false if it is null.
You can only use == and != operators with a nullable type. For other comparison use the Nullable static class.
Nested nullable types are not allowed. Nullable<Nullable<int>> i; will give a compile time error.

